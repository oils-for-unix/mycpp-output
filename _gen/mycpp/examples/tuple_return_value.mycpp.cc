// This file is GENERATED by mycpp, from Python source code

#include "mycpp/runtime.h"

namespace tuple_return_value {  // forward declare
}

GLOBAL_STR(S_Aoo, "");
GLOBAL_STR(S_clt, "bar");
GLOBAL_STR(S_xzC, "foo bar");
GLOBAL_STR(S_Eow, "spam");
GLOBAL_STR(S_asE, "zzz");

namespace tuple_return_value {  // declare

Tuple2<int, BigStr*> f(int x);
Tuple2<int, BigStr*> g(Tuple2<int, int>* t);
Tuple2<int, int> identity(Tuple2<int, int>* t);
void run_tests();
void run_benchmarks();

}  // declare namespace tuple_return_value

namespace tuple_return_value {  // define


Tuple2<int, BigStr*> f(int x) {
  int i;
  BigStr* s = nullptr;
  i = (x + 42);
  s = S_xzC;
  return Tuple2<int, BigStr*>(i, s->slice(1));
}

Tuple2<int, BigStr*> g(Tuple2<int, int>* t) {
  int t0;
  int t1;
  Tuple2<int, int>* tup0 = t;
  t0 = tup0->at0();
  t1 = tup0->at1();
  return Tuple2<int, BigStr*>((t0 + t1), S_asE);
}

Tuple2<int, int> identity(Tuple2<int, int>* t) {
  int a;
  int b;
  Tuple2<int, int>* tup1 = t;
  a = tup1->at0();
  b = tup1->at1();
  return Tuple2<int, int>(a, b);
}

void run_tests() {
  int i;
  BigStr* s = nullptr;
  int a;
  int b;
  List<Tuple2<int, BigStr*>*>* items = nullptr;
  Tuple2<int, BigStr*>* mytuple = nullptr;
  int myint;
  BigStr* mystr = nullptr;
  Tuple2<int, BigStr*> tup2 = f(0);
  i = tup2.at0();
  s = tup2.at1();
  mylib::print_stderr(StrFormat("i = %d", i));
  mylib::print_stderr(StrFormat("s = %s", s));
  mylib::print_stderr(S_Aoo);
  Tuple2<int, BigStr*> tup3 = g((Alloc<Tuple2<int, int>>(3, 4)));
  i = tup3.at0();
  s = tup3.at1();
  mylib::print_stderr(StrFormat("i = %d", i));
  mylib::print_stderr(StrFormat("s = %s", s));
  mylib::print_stderr(S_Aoo);
  Tuple2<int, int> tup4 = identity((Alloc<Tuple2<int, int>>(8, 9)));
  a = tup4.at0();
  b = tup4.at1();
  mylib::print_stderr(StrFormat("a = %d", a));
  mylib::print_stderr(StrFormat("b = %d", b));
  mylib::print_stderr(S_Aoo);
  items = Alloc<List<Tuple2<int, BigStr*>*>>();
  items->append((Alloc<Tuple2<int, BigStr*>>(43, S_clt)));
  mylib::print_stderr(StrFormat("length = %d", len(items)));
  mytuple = (Alloc<Tuple2<int, BigStr*>>(44, S_Eow));
  Tuple2<int, BigStr*>* tup5 = mytuple;
  myint = tup5->at0();
  mystr = tup5->at1();
}

void run_benchmarks() {
  int j;
  BigStr* s = nullptr;
  StackRoot _root0(&s);

  for (int i = 0; i < 1000000; ++i) {
    Tuple2<int, BigStr*> tup6 = f(i);
    j = tup6.at0();
    s = tup6.at1();
    if (j == 100000) {
      print(str(i));
    }
    mylib::MaybeCollect();
  }
}

}  // define namespace tuple_return_value

